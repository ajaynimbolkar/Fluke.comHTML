package com.fluke.ui{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import com.adobe.utils.StringUtil;		public class FlukeButton extends MovieClip 	{			// ------------------------------------------------------------- //		// Properties		// ------------------------------------------------------------- //			private var _clicked:Boolean;			private var _rotator:MovieClip;			private var _rotatorFrame:uint;			private var _clip:MovieClip;			private var _label:String;			private var _siblings:Array;			private var _allClips:Array;			private var buttonType:String;		// ------------------------------------------------------------- //		// Constructor		// ------------------------------------------------------------- //					public function FlukeButton() {								// Default to not clicked				_clicked = false;					// Show the right cursor				mouseChildren = false; 				buttonMode = true;															// Setup our listeners				addEventListener(MouseEvent.MOUSE_UP, handleMouse);				addEventListener(MouseEvent.MOUSE_DOWN, handleMouse);				addEventListener(MouseEvent.ROLL_OVER, handleMouse);				addEventListener(MouseEvent.ROLL_OUT, handleMouse);												// Declare our type				buttonType = Object(this).constructor;				buttonType = StringUtil.replace( buttonType, "class ", "" );				buttonType = StringUtil.replace( buttonType, "[", "" );				buttonType = StringUtil.replace( buttonType, "]", "" );								stop();			}		// ------------------------------------------------------------- //		// Handle Mouse Events		// ------------------------------------------------------------- //					private function handleMouse(event:MouseEvent):void {							switch(event.type) {										// When clicking down on the mouse, show the "down" state of the button					case MouseEvent.MOUSE_DOWN :						gotoAndStop(3);					break;										// After the user has clicked a button, toggle it, rotate the product, show the details.					case MouseEvent.MOUSE_UP :						this.click();					break;										// Roll Over a button -- show the hover state					case MouseEvent.ROLL_OVER :						if ( ! _clicked ) 							gotoAndStop(2);					break;										// Roll off a button -- show the flat state					case MouseEvent.ROLL_OUT :						if ( ! _clicked) 							gotoAndStop(1);					break;										default :					break;				}								resetLabel();							}					// ------------------------------------------------------------- //		// Handle the click event		// ------------------------------------------------------------- //			public function click() {								// Un-Toggle all other buttons				for(var i:uint = 0; i < _siblings.length; i++) {					// Unset the clicked switch					_siblings[i].clicked = false;										// Re-Set to Flat					_siblings[i].gotoAndStop(1);										// Re-Set the button text							if( _siblings[i].buttonType == "FlukeButton" ) 						_siblings[i].label = _siblings[i]._label;					else						_siblings[i].label = _siblings[i]._label;									}								// Toggle our clicked switch				_clicked = true;								// Stick it to the hover state				gotoAndStop(2);								// Move the 360 to the right frame				if ( _rotatorFrame )					_rotator.gotoAndStop(_rotatorFrame);						// Hide all detail windows				for(var c:uint = 0; c < _allClips.length; c++) {					_allClips[c].visible = false;				}								// Show our detail window: Stick it to 0,0, turn it on, and play from first frame.				if( _clip ) {					_clip.x = 0;					_clip.y = 0;					_clip.visible = true;					_clip.gotoAndPlay(1);				}								// Reset the label				resetLabel();							}						// ------------------------------------------------------------- //		// Reset the Dynamic Text Label		// ------------------------------------------------------------- //					public function resetLabel() {					var btnText = _label ? _label : "";								// trace( "Setting label to " + btnText );								if( buttonType == "FlukeButton" ) 					singleButtonText.text = btnText;				else					doubleButtonText.text = btnText;				}					// ------------------------------------------------------------- //		// Getters and Setters		// ------------------------------------------------------------- //							// Text Label				public function set label(l:String):void {						_label = l;										// Update the button's live text					if( buttonType == "FlukeButton" ) 						singleButtonText.text = _label;					else						doubleButtonText.text = _label;										}								public function get label():String {					return _label;				}				// Movie Clip to display on click				public function set clip(c:MovieClip):void {					// Store the movie clip property for later					_clip = c;					_clip.visible = false;				}							public function get clip():MovieClip {					// Return the current movie clip for this button					return _clip;				}						// Rotator Clip				public function set rotator(r:MovieClip):void {					_rotator = r;									}								public function get rotator():MovieClip {					return _rotator;				}								// Rotator Frame				public function set rotatorFrame(r:uint):void {					_rotatorFrame = r;									}								public function get rotatorFrame():uint {					return _rotatorFrame;				}							// Siblings (Other Buttons with toggle states)				public function set siblings(a:Array):void {					_siblings = a;									}								public function get siblings():Array {					return _siblings;				}											// Set Clicked status				public function set clicked(b:Boolean):void {					_clicked = b;									}								public function get clicked():Boolean {					return _clicked;				}											// All visible content containers				public function set allClips(a:Array):void {					_allClips = a;									}								public function get allClips():Array {					return _allClips;				}			}}